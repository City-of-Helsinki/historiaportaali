<?php

/**
 * @file
 * Contains helhist_admin_forms.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;

/**
 * Implements hook_help().
 */
function helhist_admin_forms_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the helhist_admin_forms module.
    case 'help.page.helhist_admin_forms':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides customizations for admin forms') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helhist_admin_forms_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, [
    'node_article_edit_form',
    'node_article_form',
    'node_listing_page_edit_form',
    'node_listing_page_form'
  ])) {
    // Control Hero paragraph visibility via checkbox states.
    $form['field_hero']['#states'] = [
      'visible' => [
        ':input[name="field_has_hero[value]"]' => ['checked' => TRUE],
      ],
    ];
  }
  
  if (in_array($form_id, [
    'node_listing_page_edit_form',
    'node_listing_page_form'
  ])) {
    // Control Phenomena field visibility via Listing type selection.
    $form['field_phenomena']['#states'] = [
      'visible' => [
        ':input[name="field_listing_type"]' => ['value' => 'phenomenon'],
      ],
      'required' => [
        ':input[name="field_listing_type"]' => ['value' => 'phenomenon'],
      ],
    ];
    $form['field_neighbourhoods']['#states'] = [
      'visible' => [
        ':input[name="field_listing_type"]' => ['value' => 'neighbourhood'],
      ],
      'required' => [
        ':input[name="field_listing_type"]' => ['value' => 'neighbourhood'],
      ],
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function helhist_admin_forms_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_article_edit_form':
    case 'node_article_form':
    case 'media_image_add_form':
    case 'media_image_edit_form':
      $form['field_start_year']['start_year_bce'] = [
        '#type' => 'checkbox',
        '#title' => t('BCE'),
        '#ajax' => [
          'callback' => 'helhist_admin_forms_ajax_start_year_bce',
          'event' => 'change',
        ],
        // Default to checked if saved year is negative.
        '#default_value' => ($form['field_start_year']['widget'][0]['value']['#default_value'] < 0) ? TRUE : FALSE
      ];

      $form['field_end_year']['end_year_bce'] = [
        '#type' => 'checkbox',
        '#title' => t('BCE'),
        '#ajax' => [
          'callback' => 'helhist_admin_forms_ajax_end_year_bce',
          'event' => 'change',
        ],
        // Default to checked if saved year is negative.
        '#default_value' => ($form['field_end_year']['widget'][0]['value']['#default_value'] < 0) ? TRUE : FALSE
      ];
      break;
  }

  return $form;
}

/**
* Implements Ajax custom callback function().
*/
function helhist_admin_forms_ajax_start_year_bce($form, $form_state) {
  $response = new AjaxResponse();
  $start_year = $form['field_start_year']['widget'][0]['value']['#value'];
  $selector = '#edit-field-start-year-0-value';
  $method = 'val';
  // Flip sign of year integer.
  $arguments = [-$start_year];
  $response->addCommand(new InvokeCommand($selector, $method, $arguments));

  return $response;
}

/**
* Implements Ajax custom callback function().
*/
function helhist_admin_forms_ajax_end_year_bce($form, $form_state) {
  $response = new AjaxResponse();
  $end_year = $form['field_end_year']['widget'][0]['value']['#value'];
  $selector = '#edit-field-end-year-0-value';
  $method = 'val';
  // Flip sign of year integer.
  $arguments = [-$end_year];
  $response->addCommand(new InvokeCommand($selector, $method, $arguments));

  return $response;
}
