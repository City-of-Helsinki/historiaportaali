<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function hdbt_subtheme_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('hdbt_subtheme')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    if (!empty($icon_path)) {
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function hdbt_subtheme_preprocess(&$variables) {
  $variables['hdbt_subtheme_icons_path'] = hdbt_subtheme_get_icons_path();
  $variables['#attached']['drupalSettings']['hdbtSubthemeIconsPath'] = $variables['hdbt_subtheme_icons_path'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

function hdbt_subtheme_preprocess_region(&$variables) {
  $variables['is_frontpage'] = false;
  $variables['has_hero'] = false;
  $variables['hide_koro'] = false;

  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['is_frontpage'] = true;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\Entity\Node) {
    if ($node->hasField('field_has_hero')) {
      $variables['has_hero'] = intval($node->get('field_has_hero')->getString());
    }
    if ($node->bundle() == 'map_page') {
      $variables['hide_koro'] = true;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hdbt_subtheme_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->bundle() == 'article') {
    $variables['#attached']['library'][] = 'hdbt_subtheme/reading-time';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function hdbt_subtheme_preprocess_field(&$variables, $hook) {
  $field_name = $variables['element']['#field_name'];

  // Provide term's machine name as variable (prefer English)
  if ($field_name == 'field_formats') {
    $field_items = $variables['element']['#items']->getValue();

    foreach ($field_items as $key => $field_item) {
      $format_tid = $field_item['target_id'];
      $format_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($format_tid);

      if ($format_term->hasTranslation('en')) {
        $english_term = $format_term->getTranslation('en');
        $term_name = $english_term->getName();
      } else {
        $term_name = $format_term->getName();
      }

      $term_machine_name = strtolower(str_replace(' ', '_', $term_name));

      $variables['items'][$key]['term_machine_name'] = $term_machine_name;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $taxonomy_fields = [
    // Historiaportaali metadata fields
    'field__field_keywords',
    'field__field_phenomena',
    'field__field_neighbourhoods',
    'field__field_turning_points',
    // Finna metadata fields
    'field__field_formats',
    'field__field_authors',
    'field__field_copyrights',
    'field__field_languages',
    'field__field_buildings',
  ];
  if (count(array_intersect($taxonomy_fields, $suggestions)) > 0) {
    $suggestions[] = 'field__hdbt_taxonomy__' . $variables['element']['#view_mode'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_region_alter(&$suggestions, $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\Entity\Node) {
    $suggestions[] = 'region__' . $variables['elements']['#region'] . '__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_image_formatter_alter(array &$suggestions, array $variables) {
  $entity = $variables['item']->getEntity();
  $field_name = $variables['item']->getParent()->getName();
  $suggestions[] = 'image_formatter__' . $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $field_name;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_subtheme_form_views_exposed_form_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-search-page') {
    // Hide year interval filter and add '/map' link on frontpage search block
    if (\Drupal::service('path.matcher')->isFrontPage()) {
      unset($form['year_interval']);
      unset($form['search_filters_title']);

      $label = t('Show places near me');
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/54', $langcode);

      $form['views_exposed_form']['#markup'] = '
        <a class="link" href="/' . $langcode . $alias .'">
          <span aria-hidden="true" class="hds-icon hds-icon--location"></span>                                            
          <span class="link__label">' . $label . '</span>                                            
        </a>';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Remove fallback content from message block so it doesn't get rendered when empty.
 */
function hdbt_subtheme_preprocess_block__hdbt_messages(&$variables) {
  $variables['content']['#include_fallback'] = FALSE;
}

/**
 * Implements hook_preprocess_block_HOOK().
 */
function hdbt_subtheme_preprocess_block__page_title_block(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\Entity\Node && $node->bundle() == 'listing_page') {
    $variables['subtitle'] = _get_top_level_menu_parent_title_by_nid($node->id());
  }
}

function _get_top_level_menu_parent_title_by_nid($node_id) {
  $parent_title = '';

  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $menu_link = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $node_id));

  if (is_array($menu_link) && count($menu_link)) {
    $menu_link = reset($menu_link);
    if ($menu_link->getParent()) {
      $parents = $menu_link_manager->getParentIds($menu_link->getParent());
      $parents = array_reverse($parents);
      $top_level_parent = reset($parents);
      $menu_item = $menu_link_manager->createInstance($top_level_parent);
      $parent_title = $menu_item->getTitle();
    }
  }

  return $parent_title;
}