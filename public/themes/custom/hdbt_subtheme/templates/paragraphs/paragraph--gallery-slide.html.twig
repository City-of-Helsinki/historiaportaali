{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
  'gallery-slide',
  view_mode ? 'gallery-slide--' ~ view_mode|clean_class,
  'splide__slide'
]
%}

{# Check if the gallery should be printed in original aspect ratio or not #}
{% set original_aspect_ratio = false %}
{% set paragraph_parent = paragraph.getParentEntity() %}
{% if paragraph_parent.field_original_aspect_ratio[0].value %}
  {% set original_aspect_ratio = true %}
{% endif %}

{% set language = language.getId() %}

{% block paragraph %}
  <li{{ attributes.addClass(classes).setAttribute('aria-hidden', 'true') }}>
    <div class="media--image__content">
      {% set alt = content.field_gallery_slide_media[0]['#media'].field_media_image.0.alt %}
      {% if original_aspect_ratio %}
        {% set image =
          drupal_image(content.field_gallery_slide_media[0]['#media'].field_media_image.entity.uri.value, 'image_orig', {alt: alt}, responsive=true)
        %}
      {% else %}
        {% set image =
          drupal_image(content.field_gallery_slide_media[0]['#media'].field_media_image.entity.uri.value, 'image_gallery_3_2', {alt: alt}, responsive=true)
        %}
      {% endif %}
      <a href="{{ path('entity.media.canonical', { 'media': content.field_gallery_slide_media[0]['#media'].id }) }}">{{ image }}</a>
      {% apply spaceless %}
        <figcaption class="media--image__caption">
          {% set caption = content.field_gallery_slide_caption[0]['#context']['value'] %}
          {% if content.field_gallery_slide_media|render %}
            {# The image caption is attached to each image so we need to get it from the media entity #}
            {% for key, image in content.field_gallery_slide_media %}
              {% if image.entity %}
                {% if image.entity.hastranslation(language) %}
                  {% set media = image.entity.translation(language) %}
                {% else %}
                  {% set media = image.entity %}
                {% endif %}
                {% set photographer = media.fields.field_photographer.value %}
                {% if caption is null %}
                  {# If paragraph image caption is not set, try to get it from the media entity #}
                  {% set caption = media.fields.field_image_caption.0.value %}
                {% endif %}
                {% if photographer %}
                  {% set caption = caption is not null ? caption ~ ' ' %}
                  {% set caption = caption ~ 'Photo:'|trans ~ ' ' ~ photographer %}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endif %}
          {% if caption %}
            {{ caption }}
          {% endif %}
        </figcaption>
      {% endapply %}
    </div>
  </li>
{% endblock paragraph %}
