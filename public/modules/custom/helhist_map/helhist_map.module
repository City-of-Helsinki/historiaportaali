<?php

use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
* Implements hook_theme().
*/
function helhist_map_theme($existing, $type, $theme, $path) {
  return [
    'map_controls' => [
      'template' => 'map-controls',
      'variables' => [
        'map_layers' => []
      ]
      ],
    'comparison_map_controls' => [
      'template' => 'comparison-map-controls',
      'variables' => [
        'map_layers' => []
      ]
      ],
      'map_lift_block' => [
        'template' => 'map-lift-block',
        'variables' => [
          'map_node_url' => ''
        ]
      ]
  ];
}

/**
 * Implements hook_views_post_execute().
 */
function helhist_map_views_post_execute(ViewExecutable $view) {
  if ($view->id() == 'combined_map' && in_array($view->current_display, _getMapDisplays())) {
    // Apply exposed filters to media_map view result
    $exposed_filters = $view->getExposedInput();
    $media_view = Views::getView('media_map');
    $media_view->setDisplay('block');
    $media_view->setExposedInput($exposed_filters);
    $media_view->execute();
    $media_view_result = $media_view->result;

    // Make media result indexes to follow article result indexes
    $new_media_index = count($view->result);
    foreach ($media_view_result as $key => $m_result) {
      $media_view_result[$key]->index = $new_media_index;
      $new_media_index++;
    }

    // Merge media view results to article view results
    $view->result = array_merge($view->result, $media_view_result);
    $view->total_rows = count($view->result);
    
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface && $node->bundle() == 'map_page') {
      // Get the map center from field
      if ($node->hasField('field_default_map_center') && !$node->get('field_default_map_center')->isEmpty()) {
        $default_map_center = $node->get('field_default_map_center')->first()->getValue();
        $view->style_plugin->options['map_position']['center']['lat'] = $default_map_center['lat'];
        $view->style_plugin->options['map_position']['center']['lon'] = $default_map_center['lon'];
      }

      // Get the map zoom level from field
      if ($node->hasField('field_default_map_zoom_level') && !$node->get('field_default_map_zoom_level')->isEmpty()) {
        $default_map_zoom_level = $node->get('field_default_map_zoom_level')->getString();
        $view->style_plugin->options['map_position']['zoom'] = $default_map_zoom_level;
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function helhist_map_views_pre_render(ViewExecutable $view) {
  if ($view->storage->id() == 'combined_map' && in_array($view->current_display, _getMapDisplays())) {
    $view->element['#attached']['library'][] = 'hdbt_subtheme/map-view';
  }
}

/**
 * Implements hook_leaflet_map_info_alter().
 */
function helhist_map_leaflet_map_info_alter(array &$map_info) {
  foreach ($map_info as $map_name => $map) {
    $map_info[$map_name]['icon']['iconUrl'] = '/themes/custom/hdbt_subtheme/src/icons/map_marker.svg';
    $map_info[$map_name]['icon']['iconSize'] = ['x' => '40', 'y' => '40'];
  }
}

function _getMapDisplays() {
  return [
    'block'
  ];
}