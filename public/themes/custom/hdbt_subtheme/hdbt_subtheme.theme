<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

use Drupal\node\Entity\Node;

/**
 * Get the site's global search page URL.
 *
 * Search page is implemented as node/114. This helper function is used to get
 * the URL for the search page to not duplicate the node id template files.
 *
 * @return string
 *   The search page URL.
 */
function hdbt_subtheme_get_search_page_url($nid = 114) {
  return \Drupal::service('url_generator')->generateFromRoute('entity.node.canonical', ['node' => $nid]);
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function hdbt_subtheme_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('hdbt_subtheme')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    if (!empty($icon_path)) {
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function hdbt_subtheme_preprocess(&$variables) {
  $variables['hdbt_subtheme_icons_path'] = hdbt_subtheme_get_icons_path();
  $variables['#attached']['drupalSettings']['hdbtSubthemeIconsPath'] = $variables['hdbt_subtheme_icons_path'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements template_preprocess_html().
 */
function hdbt_subtheme_preprocess_html(&$variables) {
  $search_page_aliases = ['/search', '/haku', '/sok'];
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  if ($path_alias && in_array($path_alias, $search_page_aliases)) {
    $variables['attributes']['class'][] = 'search-page';
  }
}

/**
 * Implements template_preprocess_region().
 */
function hdbt_subtheme_preprocess_region(&$variables) {
  $variables['is_frontpage'] = \Drupal::service('path.matcher')->isFrontPage();
  $variables['has_hero'] = FALSE;
  $variables['hide_koro'] = FALSE;

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node) {
    if ($node->hasField('field_has_hero')) {
      $variables['has_hero'] = intval($node->get('field_has_hero')->getString());
    }
    if ($node->bundle() == 'map_page') {
      $variables['hide_koro'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hdbt_subtheme_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->bundle() == 'article') {
    $variables['#attached']['library'][] = 'hdbt_subtheme/reading-time';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function hdbt_subtheme_preprocess_field(&$variables, $hook) {
  $field_name = $variables['element']['#field_name'];

  $variables['site_search_page_url'] = hdbt_subtheme_get_search_page_url();

  // Provide term's machine name as variable (prefer English)
  if ($field_name == 'field_formats') {
    $field_items = $variables['element']['#items']->getValue();

    foreach ($field_items as $key => $field_item) {
      $format_tid = $field_item['target_id'];
      $format_term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($format_tid);

      if ($format_term->hasTranslation('en')) {
        $english_term = $format_term->getTranslation('en');
        $term_name = $english_term->getName();
      } else {
        $term_name = $format_term->getName();
      }

      $term_machine_name = strtolower(str_replace(' ', '_', $term_name));

      $variables['items'][$key]['term_machine_name'] = $term_machine_name;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_field_alter(&$suggestions, $variables) {
  $taxonomy_fields = [
    // Historiaportaali metadata fields
    'field__field_keywords',
    'field__field_phenomena',
    'field__field_neighbourhoods',
    'field__field_turning_points',
    // Finna metadata fields
    'field__field_formats',
    'field__field_authors',
    'field__field_copyrights',
    'field__field_languages',
    'field__field_buildings',
  ];
  if (count(array_intersect($taxonomy_fields, $suggestions)) > 0) {
    $suggestions[] = 'field__hdbt_taxonomy__' . $variables['element']['#view_mode'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_region_alter(&$suggestions, $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node) {
    $suggestions[] = 'region__' . $variables['elements']['#region'] . '__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_image_formatter_alter(array &$suggestions, array $variables) {
  $entity = $variables['item']->getEntity();
  $field_name = $variables['item']->getParent()->getName();
  $suggestions[] = 'image_formatter__' . $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $field_name;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];

  $kore_paragraphs = [
    'kore_archive',
    'kore_building',
    'kore_field',
    'kore_gender',
    'kore_language',
    'kore_name',
    'kore_principal',
    'kore_type',
  ];

  if (in_array($paragraph->bundle(), $kore_paragraphs)) {
    $suggestions[] = 'paragraph__kore_paragraph';
  }

  $kore_single_paragraphs = [
    'kore_continuum',
    'kore_lineage',
  ];

  if (in_array($paragraph->bundle(), $kore_single_paragraphs)) {
    $suggestions[] = 'paragraph__kore_paragraph_single';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_subtheme_form_views_exposed_form_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-search-page') {
    // Hide year interval filter and add '/map' link on frontpage search block
    if (\Drupal::service('path.matcher')->isFrontPage()) {
      unset($form['year_interval']);
      unset($form['search_filters_title']);

      $label = t('Show places near me');
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/54', $langcode);

      $form['views_exposed_form']['#markup'] = '
        <a class="link" href="/' . $langcode . $alias .'">
          <span aria-hidden="true" class="hds-icon hds-icon--location"></span>
          <span class="link__label">' . $label . '</span>
        </a>';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Add a heading to fix semantics of the listing blocks
 */
function hdbt_subtheme_preprocess_block__views_block(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node && $node->hasField('field_listing_type')) {
    $value = $node->field_listing_type->value;
    if ($value) {
      $variables['hidden_block_title'] = $node->field_listing_type->getFieldDefinition()
        ->getSetting('allowed_values')[$value];
    }
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Remove fallback content from message block so it doesn't get rendered when empty.
 */
function hdbt_subtheme_preprocess_block__hdbt_messages(&$variables) {
  $variables['content']['#include_fallback'] = FALSE;
}

/**
 * Implements hook_preprocess_block_HOOK().
 */
function hdbt_subtheme_preprocess_block__page_title_block(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof Node) {
    if ($node->bundle() == 'listing_page') {
      $variables['subtitle'] = _get_top_level_menu_parent_title_by_nid($node->id());
    }
    if ($node->bundle() == 'kore_school') {
      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
      $kore_title = \Drupal::config('helhist_kore_admin.settings')->get('kore_search_title');
      $variables['subtitle'] = $kore_title[$langcode] ?? $kore_title['fi'] ?? '';
    }
  }
}

function _get_top_level_menu_parent_title_by_nid($node_id) {
  $parent_title = '';

  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $menu_link = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $node_id));

  if (is_array($menu_link) && count($menu_link)) {
    $menu_link = reset($menu_link);
    if ($menu_link->getParent()) {
      $parents = $menu_link_manager->getParentIds($menu_link->getParent());
      $parents = array_reverse($parents);
      $top_level_parent = reset($parents);
      $menu_item = $menu_link_manager->createInstance($top_level_parent);
      $parent_title = $menu_item->getTitle();
    }
  }

  return $parent_title;
}

/**
 * Implements template_preprocess_paragraph().
 */
function hdbt_subtheme_preprocess_media(&$variables) {
  $variables['site_search_page_url'] = hdbt_subtheme_get_search_page_url();
}

/**
 * Implements template_preprocess_paragraph().
 */
function hdbt_subtheme_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // Salvaged from HDBT 1.4:
  // Check if the paragraph is a type of gallery and prepare the slides
  // and generate the thumbnails.
  if ($paragraph_type == 'gallery') {
    $variables['#attached']['library'][] = 'hdbt_subtheme/gallery';

    $slide_paragraphs = $paragraph->get('field_gallery_slides')->getValue();
    $slide_ids = [];

    foreach ($slide_paragraphs as $slide_paragraph) {
      $slide_ids[] = $slide_paragraph['target_id'];
    }

    // Get a paragraph storage object.
    $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
    // Load all slide paragraphs.
    $slides = $paragraph_storage->loadMultiple($slide_ids);

    $slide_thumbnails = [];
    $slide_thumbnails_alternative_texts = [];
    foreach ($slides as $slide) {
      $slide_media = $slide
        ->get('field_gallery_slide_media')
        ->first()
        ->get('entity')
        ->getTarget()
        ->getValue();
      $image = $slide_media
        ->get('field_media_image')
        ->first()
        ->get('entity')
        ->getTarget()
        ->getValue();

      $alternative_text = [
        'caption' => $slide->field_gallery_slide_caption->value,
        'alt' => $slide_media->field_media_image->first()->alt,
      ];

      $slide_thumbnails_alternative_texts[] = $alternative_text;
      $slide_thumbnails[] = $image;
    }

    $variables['gallery_slide_thumbnails'] = $slide_thumbnails;
    $variables['gallery_slide_thumbnails_alt_texts'] = $slide_thumbnails_alternative_texts;
  }

  if (in_array($paragraph_type, ['kore_continuum', 'kore_lineage'])) {
    $year = $paragraph->get('field_kore_start_year')->value;

    $node = $paragraph->get('field_kore_school')->referencedEntities();
    $school_names = isset($node[0]) ? $node[0]->get('field_kore_names')->referencedEntities() : [];
    foreach ($school_names as $name) {

      $start = $name->get('field_kore_start_year')->value;
      $end = $name->get('field_kore_end_year')->value;

      if (!is_null($year) && !is_null($start) && !is_null($end)) {

        // Event took place between name years.
        if ((intval($start) < intval($year)) && (intval($end) > intval($year))) {
          $variables['node_title'] = $name->get('field_kore_name')->value;
          $variables['node_id'] = $node[0]->id();
        } else {
          // Event took place on name change year.
          if (intval($start) == intval($year)) {
            $variables['node_title'] = $name->get('field_kore_name')->value;
            $variables['node_id'] = $node[0]->id();
            $start_name = $name->get('field_kore_name')->value;
          }
          if (intval($end) == intval($year)) {
            $variables['node_title'] = $name->get('field_kore_name')->value;
            $variables['node_id'] = $node[0]->id();
            $end_name = $name->get('field_kore_name')->value;
          }
        }
      }
    }

    if (isset($start_name) && isset($end_name)) {
      $variables['node_title'] = $start_name . " / " . $end_name;
    }
  }
}
