<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
* Implements hook_theme().
*/
function helhist_map_theme($existing, $type, $theme, $path) {
  return [
    'map_controls' => [
      'template' => 'map-controls',
      'variables' => [
        'map_layers' => []
      ]
      ],
    'comparison_map_controls' => [
      'template' => 'comparison-map-controls',
      'variables' => [
        'map_layers' => []
      ]
      ],
      'map_lift_block' => [
        'template' => 'map-lift-block',
        'variables' => [
          'map_node_url' => ''
        ]
      ]
  ];
}

/**
 * Implements hook_views_post_execute().
 */
function helhist_map_views_post_execute(ViewExecutable $view) {
  if ($view->id() == 'combined_map' && in_array($view->current_display, _getMapDisplays())) {
    // Apply exposed filters to media_map view result
    $exposed_filters = $view->getExposedInput();
    $media_view = Views::getView('media_map');
    $media_view->setDisplay('block');
    $media_view->setExposedInput($exposed_filters);
    $media_view->execute();
    $media_view_result = $media_view->result;

    // Make media result indexes to follow article result indexes
    $new_media_index = count($view->result);
    foreach ($media_view_result as $key => $m_result) {
      $media_view_result[$key]->index = $new_media_index;
      $new_media_index++;
    }

    // Merge media view results to article view results
    $view->result = array_merge($view->result, $media_view_result);
    $view->total_rows = count($view->result);
    
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface && $node->bundle() == 'map_page') {
      // Get the map center from field
      if ($node->hasField('field_default_map_center') && !$node->get('field_default_map_center')->isEmpty()) {
        $default_map_center = $node->get('field_default_map_center')->first()->getValue();
        $view->style_plugin->options['map_position']['center']['lat'] = $default_map_center['lat'];
        $view->style_plugin->options['map_position']['center']['lon'] = $default_map_center['lon'];
      }

      // Get the map zoom level from field
      if ($node->hasField('field_default_map_zoom_level') && !$node->get('field_default_map_zoom_level')->isEmpty()) {
        $default_map_zoom_level = $node->get('field_default_map_zoom_level')->getString();
        $view->style_plugin->options['map_position']['zoom'] = $default_map_zoom_level;
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function helhist_map_views_pre_render(ViewExecutable $view) {
  if ($view->storage->id() == 'combined_map' && in_array($view->current_display, _getMapDisplays())) {
    $view->element['#attached']['library'][] = 'hdbt_subtheme/map-view';
  }
}

/**
 * Implements hook_leaflet_map_info_alter().
 */
function helhist_map_leaflet_map_info_alter(array &$map_info) {
  foreach ($map_info as $map_name => $map) {
    $map_info[$map_name]['icon']['iconUrl'] = '/themes/custom/hdbt_subtheme/src/icons/map_marker.svg';
    $map_info[$map_name]['icon']['iconSize'] = ['x' => '40', 'y' => '40'];
  }
}

function _getMapDisplays() {
  return [
    'block'
  ];
}

/**
 * Implements hook_form_alter().
 *
 * Hide taxonomy terms from exposed form filters that wouldn't return results.
 */
function helhist_map_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form_id = 'views-exposed-form-combined-map-block--2';
  $select_field = 'field_keywords_target_id';
  $taxonomy_field = 'node__field_keywords';

  if ($form['#id'] == $form_id) {
    $active_terms = _get_active_terms($taxonomy_field, $select_field);
    if (isset($active_terms)) {
      unset($form[$select_field]['#options']);
      $form[$select_field]['#options'] = ['All' => t('Select keyword')];

      foreach ($active_terms as $active_term) {
        $form[$select_field]['#options'][$active_term[0]] = $active_term[1];
      }
    }
    else {
      // No active terms were found, so something weird must have happened.
      unset($form[$select_field]['#options']);
      $form[$select_field]['#options'] = ['All' => t('Select keyword')];
    }
  }
}

/**
 * Find taxonomy terms that return node results for a given field.
 * 
 * @param string $taxonomy_field
 * @param string $select_field
 */
function _get_active_terms($taxonomy_field, $select_field) {

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $term_list = [];

  // Find taxonomy terms that link to node type content with a geolocation.
  $connection = \Drupal::database();
  $query = $connection->select($taxonomy_field, 'node__field_table');
  $query->join('node__field_geolocation', 'geolocation', 'geolocation.entity_id = node__field_table.entity_id');
  $query->join('taxonomy_term_field_data', 'tname', 'tname.tid = node__field_table.' . $select_field);
  $query->condition('tname.langcode', $language);
  $query->fields('node__field_table', [$select_field]);
  $query->fields('tname', ['name']);
  $result = $query->distinct()->execute();
  while ($row = $result->fetchAssoc()) {
    array_push($term_list, [$row[$select_field], $row['name']]);
  }

  // Find taxonomy terms that link to media type content with a geolocation.
  $connection = \Drupal::database();
  $query = $connection->select($taxonomy_field, 'media__field_table');
  $query->join('media__field_geolocation', 'geolocation', 'geolocation.entity_id = media__field_table.entity_id');
  $query->join('taxonomy_term_field_data', 'tname', 'tname.tid = media__field_table.' . $select_field);
  $query->condition('tname.langcode', $language);
  $query->fields('media__field_table', [$select_field]);
  $query->fields('tname', ['name']);
  $result = $query->distinct()->execute();
  while ($row = $result->fetchAssoc()) {
    array_push($term_list, [$row[$select_field], $row['name']]);
  }

  // Sort final options array.
  usort($term_list, "_select_sort");
  return $term_list;
}

/**
 * Sort term list array by taxonomy name column.
 *
 * @param array $a
 * @param array $b
 */
function _select_sort ($a, $b) {
  return strcmp($a[1], $b[1]);
}
