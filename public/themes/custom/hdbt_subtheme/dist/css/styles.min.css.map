{"version":3,"file":"css/styles.min.css","mappings":"AA2CA;;;;;;;;;;;;EC/BE;ACZF;EACE,aAAa;;ACDf;EACE,yBCDY;;ACAd;EACE,cAAyB;EAD3B;IAII,mBCCS;EDLb;IAcQ,sBAAsB;EAd9B;IAmBM,iBAAiB;IACjB,aCfO;IDLb;MLYI,kBAAgD;MAO9C,mBAAoD;MKKlD,gBEnBc;MFoBd,gBCpBK;IDLb;MA6BQ,qBAAqB;IG7B7B;IHAA;MASM,oBAAa;MAAb,oBAAa;MAAb,aAAa,KGTnB","sources":["webpack:///./src/scss/library/mixins/_mixins.scss","webpack:///./src/scss/styles.scss","webpack:///./src/scss/state/_states.scss","webpack:///./src/scss/base/_base.scss","webpack:///./src/scss/library/variables/_colors.scss","webpack:///./src/scss/components/views/_phenomena_listing.scss","webpack:///./src/scss/library/variables/_constraints.scss","webpack:///./src/scss/library/variables/_typography.scss","webpack:///<no source>"],"sourcesContent":["// Function nounit strips any unit from variable.\n@function nounit($number) {\n  @return $number / ($number * 0 + 1);\n}\n\n// Calculate rem (root em) units from pixels for font-size and line-height.\n@mixin font-size($font-size, $line-height: \"\") {\n  @if $font-size == 'inherit' {\n    @error 'No inherit values allowed in font-size mixin!';\n  } @else if unit($font-size) == 'rem' {\n    font-size: $font-size;\n  } @else {\n    font-size: ($font-size / $base-font-size) * 1rem;\n  }\n\n  // Handle the line-height.\n  @if $line-height != \"\" {\n    // Check if line-height is in px.\n    @if unit($line-height) == 'px' {\n      line-height: ($line-height / $base-font-size) * 1rem;\n    }\n    @else {\n      // Check if line-height is in rem and handle the line-height.\n      @if unit($line-height) == 'rem' {\n        line-height: $line-height;\n      }\n      // The line-height is a multiplier.\n      @else {\n        $font-size-px: nounit($font-size);\n        $base-font-size-px: nounit($base-font-size);\n\n        // Convert the font-size if it is in rem.\n        @if unit($font-size) == 'rem' {\n          $font-size-px: nounit($font-size) * nounit($base-font-size);\n        }\n\n        $conversion: $base-font-size-px * ($font-size-px / $base-font-size-px) * $line-height / $base-font-size-px;\n        line-height: #{$conversion}rem;\n      }\n    }\n  }\n}\n\n/**\n * To give different styles depending on how many items a wrapper has you can use this mixing to assign the styles\n * to correct element. For example:\n *\n * If the wrapper has 1, 2 or 3 items make the items 30% wide, otherwise they should be 20% wide:\n * .wrapper .item {\n *   width: 20%;\n *\n *   @include content_count(1, 2, 3) {\n *     width: 30%;\n *   }\n * }\n */\n@mixin content_count($number_of_items...) {\n  @each $item in $number_of_items {\n    @if type-of($item) == number {\n      @for $i from 1 through $item {\n        &:nth-child(#{$i}):nth-last-child(#{$item - $i + 1}) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","//\n// @file\n// This file includes all imports\n//\n\n@import \"~breakpoint-sass\";\n\n@import \"library/variables/*.*\";\n@import \"library/mixins/*.*\";\n@import \"layout/*\";\n@import \"state/*\";\n@import \"base/**/*.*\";\n@import \"components/**/*.*\";\n",".is-hidden {\n  display: none;\n}\n","body {\n  background-color: $sand;\n}","$sand: #FAF9F7;",".views--listings {\n  margin: $spacing-double 0;\n\n  .views-row {\n    margin-bottom: $spacing;\n  }\n\n  article.node--view-mode-listing-item {\n    @include breakpoint($breakpoint-m) {\n      display: flex;\n    }\n\n    .thumbnail-image {\n      img {\n        vertical-align: middle;\n      }\n    }\n\n    .content-wrapper {\n      background: white;\n      padding: $spacing;\n\n      h2 {\n        @include font-size(20px, 24px);\n        font-weight: $font-weight-bold;\n        margin: 0 0 $spacing;\n      }\n\n      a {\n        text-decoration: none;\n      }\n    }\n  }\n}","//\n// @file\n// This file includes constraints used in the theme.\n//\n\n$gutter: 16px;\n\n$spacing: $gutter; // 16px\n$spacing-quarter: $spacing * .25; // 4px\n$spacing-half: $spacing * .5; // 8px\n$spacing-and-half: $spacing * 1.5; // 24px\n$spacing-double: $spacing * 2; // 32px\n$spacing-triple: $spacing * 3; // 48px\n$spacing-quadruple: $spacing * 4; // 64px\n$spacing-sextuple: $spacing * 6; // 96px\n\n$wrapper-width-max: 1920px;\n\n$image-content-width-max: 996px;\n$content-width-max: 790px;\n\n$footer-koro-height: 50px;\n","$base-font-size: 16px;\n\n// Font weight.\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n$font-weight-bold: 700;\n$font-weight-black: 800;\n\n// Line height.\n$lineheight-xxl: 2;"],"names":[],"sourceRoot":""}